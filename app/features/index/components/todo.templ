package components 

import (
	"fmt"
	"github.com/starfederation/datastar-go/datastar"
	common "northstar/app/features/common/components"
)

type TodoViewMode int

const (
	TodoViewModeAll TodoViewMode = iota
	TodoViewModeActive
	TodoViewModeCompleted
	TodoViewModeLast
)

var TodoViewModeStrings = []string{"All", "Active", "Completed"}

type Todo struct {
	Text      string `json:"text"`
	Completed bool   `json:"completed"`
}

type TodoMVC struct {
	Todos      []*Todo      `json:"todos"`
	EditingIdx int          `json:"editingIdx"`
	Mode       TodoViewMode `json:"mode"`
}

templ TodosMVCView(mvc *TodoMVC) {
	{{
		hasTodos := len(mvc.Todos) > 0
		left, completed := 0, 0
		for _, todo := range mvc.Todos {
			if !todo.Completed {
				left++
			} else {
				completed++
			}
		}
		input := ""
		if mvc.EditingIdx >= 0 {
			input = mvc.Todos[mvc.EditingIdx].Text
		}
	}}
	<div id="todos-container">
		<div
			data-signals={ fmt.Sprintf("{input:'%s'}", input) }
		>
			<section>
					<div class="alert">
						@common.Icon("material-symbols:info")
						<div class="alert-content">
							<span><strong>This mini application is driven by a single get request!</strong></span>
							<span><small>As you interact with the UI, the backend state is updated and new partial HTML fragments are sent down to the client via Server-Sent Events. You can make simple apps or full blown SPA replacements with this pattern. Open your dev tools and watch the network tab to see the magic happen (you will want to look for the "/todos" Network/EventStream tab).</small></span>
						</div>
					</div>
					<p>
						The input is bound to a local store, but this is not a single page application.  
						It is like having <a href="https://htmx.org" target="_blank">HTMX</a> + 
						<a href="https://alpinejs.dev/" target="_blank">Alpine.js</a>
						but with just one API to learn and much easier to extend.
					</p>
					<div class="todo-controls">
						if hasTodos {
							<button
								id="toggleAll"
								class="todo-toggle-all"
								data-tip="toggle all todos"
								data-on-click={ datastar.PostSSE("/api/todos/-1/toggle") }
								data-indicator="toggleAllFetching"
								data-attrs-disabled="$toggleAllFetching"
							>
								@common.Icon("material-symbols:checklist")
							</button>
						}
						if mvc.EditingIdx <0 {
							@TodoInput(-1)
						}
						@common.SseIndicator("toggleAllFetching")
					</div>
				if hasTodos {
					<section>
						<ul>
							for i, todo := range mvc.Todos {
								@TodoRow(mvc.Mode, todo, i, i == mvc.EditingIdx)
							}
						</ul>
					</section>
					<footer class="todo-footer">
						<div>
							<small>
								<strong>
									{ fmt.Sprint(left) }
									if (len(mvc.Todos) > 1) {
										items
									} else {
										item
									}
								</strong> left
							</small>
						</div>
						<div class="todo-controls">
							for i := TodoViewModeAll; i < TodoViewModeLast; i++ {
								if i == mvc.Mode {
									<button aria-current="true">{ TodoViewModeStrings[i] }</button>
								} else {
									<button
										class="secondary"
										data-on-click={ datastar.PutSSE("/api/todos/mode/%d", i) }
									>
										{ TodoViewModeStrings[i] }
									</button>
								}
							}
						</div>
						<div class="todo-controls">
							if completed > 0 {
								<button
									class="contrast"
									data-tip={ fmt.Sprintf("clear %d completed todos", completed) }
									data-on-click={ datastar.DeleteSSE("/api/todos/-1") }
								>
									@common.Icon("material-symbols:delete")
								</button>
							}
							<button
								class="contrast"
								data-tip="Reset list"
								data-on-click={ datastar.PutSSE("/api/todos/reset") }
							>
								@common.Icon("material-symbols:delete-sweep")
							</button>
						</div>
					</footer>
					<footer>
						<small>Click to edit, click away to cancel, press enter to save.</small>
					</footer>
				}
			</section>
		</div>
	</div>
}

templ TodoInput(i int) {
	<input
		id="todoInput"
		data-testid="todos_input"
		placeholder="What needs to be done?"
		data-bind-input
		data-on-keydown={ fmt.Sprintf(`
			if (evt.key !== 'Enter' || !$input.trim().length) return;
			%s;
			$input = '';
		`, datastar.PutSSE("/api/todos/%d/edit",i) ) }
		if i >= 0 {
			data-on-click__outside={ datastar.PutSSE("/api/todos/cancel") }
		}
	/>
}

templ TodoRow(mode TodoViewMode, todo *Todo, i int, isEditing bool) {
	{{
		indicatorID := fmt.Sprintf("indicator%d", i)
		fetchingSignalName := fmt.Sprintf("fetching%d", i)
	}}
	if isEditing {
		@TodoInput(i)
	} else if (
		mode == TodoViewModeAll) ||
		(mode == TodoViewModeActive && !todo.Completed) ||
		(mode == TodoViewModeCompleted && todo.Completed) {
		<li id={ fmt.Sprintf("todo%d", i) } class="todo-item">
			<label
				id={ fmt.Sprintf("toggle%d", i) }
				class="todo-checkbox"
				data-on-click={ datastar.PostSSE("/api/todos/%d/toggle", i) }
				data-indicator={ fetchingSignalName }
			>
				if todo.Completed {
					@common.Icon("material-symbols:check-box-outline")
				} else {
					@common.Icon("material-symbols:check-box-outline-blank")
				}
			</label>
			<label
				id={ indicatorID }
				class="todo-text"
				data-on-click={ datastar.GetSSE("/api/todos/%d/edit", i) }
				data-indicator={ fetchingSignalName }
			>
				{ todo.Text }
			</label>
			<button
				id={ fmt.Sprintf("delete%d", i) }
				class="todo-delete"
				data-on-click={ datastar.DeleteSSE("/api/todos/%d", i) }
				data-testid={ fmt.Sprintf("delete_todo%d", i) }
				data-indicator={ fetchingSignalName }
				data-attrs-disabled={ fetchingSignalName + "" }
			>
				@common.Icon("material-symbols:close")
			</button>
			@common.SseIndicator(fetchingSignalName)
		</li>
	}
}
